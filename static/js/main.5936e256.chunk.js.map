{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","greenMode","htmlFor","toggleMode","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","split","document","getElementById","select","navigator","clipboard","writeText","join","length","defaultProps","Alert","alert","role","msg","About","myStyle","setMyStyle","btnText","setBtnText","border","App","setMode","setAlert","message","setTimeout","body","setInterval","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5936e256.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      {/* //use back ticks to use template literals inside string */}\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.greenMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className =\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Enable Greenish Mode</label>\r\n          </div>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className =\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Enable Bluish Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About text here'\r\n}","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n        // console.log(\"Uppercase clicked\"+ text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to Uppercase!\",\"success\");\r\n    }\r\n    const handleClearClick=()=>{\r\n        let newText='';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared!\",\"success\");\r\n\r\n    }\r\n    const handleLowClick=(event)=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to Lowercase!\",\"success\");\r\n\r\n    }\r\n    const handleInverseClick=()=>{\r\n        let newText='';\r\n        // for(let i=0;i<text.length;i++){\r\n        //     if (text[i]===text[i].toUpperCase()){\r\n        //        newText=text[i].toLowerCase();\r\n        //     }else if(text[i]===text[i].toLowerCase() ){\r\n        //         newText=text[i].toUpperCase();\r\n        //     }\r\n\r\n        \r\n        console.log(text.split(\"\"));\r\n        props.showAlert(\"Function incomplete!\",\"success\");\r\n\r\n    }\r\n    const handleCopy=()=>{\r\n        let text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied!\",\"success\");\r\n\r\n    }\r\nconst handleExtraSpaces=()=>{\r\n    let newText=text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed!\",\"success\");\r\n\r\n}\r\n    const handleOnChange=(event)=>{\r\n        // console.log(\"handleOnChange clicked\");\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    \r\n    const[text,setText]=useState('Enter text here');\r\n    return (\r\n        <>\r\n        <div className=\"container my-4\" style={{color:props.mode==='light'?'black':'white'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'grey', color:props.mode==='light'?'black':'white'}} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n            \r\n            {/* <button className={`btn btn-${props.mode==='light'?'primary':'success'} my-4 mx-2`}  onClick={handleUpClick}>Convert to Uppercase</button> */}\r\n            <button className={`btn btn-${props.mode==='light'?'primary':'light'} my-4 mx-2`}  onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className={`btn btn-${props.mode==='light'?'primary':'light'} my-4 mx-2`}  onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button className={`btn btn-${props.mode==='light'?'primary':'light'} my-4 mx-2`}  onClick={handleClearClick}>Clear</button>\r\n            <button className={`btn btn-${props.mode==='light'?'primary':'light'} my-4 mx-2`}  onClick={handleInverseClick}>Inverse Case</button>\r\n            <button className={`btn btn-${props.mode==='light'?'primary':'light'} my-4 mx-2`}  onClick={handleCopy}>Copy Text</button>\r\n            <button className={`btn btn-${props.mode==='light'?'primary':'light'} my-4 mx-2`}  onClick={handleExtraSpaces}>Cut Extra Spaces</button>\r\n\r\n            </div> \r\n            </div>\r\n            <div className=\"container my-2\" style={{color:props.mode==='primary'?'white':'#042743'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008* text.split(\" \").length} Minutes read</p>\r\n                <h2>Preview Text</h2>\r\n                <p>{text.length>0?text:\"Enter something in textbox above to preview it here\"}</p>\r\n            </div>\r\n            </>\r\n    )\r\n}\r\nTextForm.propTypes = {\r\n    heading: PropTypes.string\r\n}\r\nTextForm.defaultProps = {\r\n    heading: \"Enter your heading here\"\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    // const capitalize = (word) => {\r\n    //     const lower = word.toLowerCase();\r\n    //     return lower.charAt(0).toUpperCase + lower.slice(1);\r\n    // }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {/* <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} */}\r\n            <strong>{(props.alert.type)}</strong>: {props.alert.msg}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Alert","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const { myStyle, setMyStyle } = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    });\r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    const toggleStyle = () => {\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        } else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container my-4\" style={myStyle}>\r\n                <h2>About Us</h2>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" onClick={toggleStyle} className=\"btn btn-dark my-4\">{btnText}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './Appa.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// import About from './components/About';\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      setInterval(() => {\n        document.title = 'TextUtils- Bluish mode Enabled'\n      }, 1500);\n      setInterval(() => {\n        document.title = 'TextUtils- Home'\n      }, 2000);\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n\n  }\n  const greenMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#174B45';\n      showAlert(\"Green mode has been enabled\", \"success\");\n      setInterval(() => {\n        document.title = 'TextUtils- Greenish mode Enabled'\n      }, 1500);\n      setInterval(() => {\n        document.title = 'TextUtils- Home'\n      }, 2000);\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} greenMode={greenMode} />\n        <Alert alert={alert} />\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm heading=\"Enter Text here\" showAlert={showAlert} mode={mode} />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}